// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/SoftBonePluginPrivatePCH.h"
#include "SoftBone.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeSoftBone() {}
static class UEnum* ERestoringWeight_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SOFTBONE_API class UEnum* Z_Construct_UEnum_SoftBone_ERestoringWeight();
		extern SOFTBONE_API class UPackage* Z_Construct_UPackage_SoftBone();
		Singleton = GetStaticEnum(Z_Construct_UEnum_SoftBone_ERestoringWeight, Z_Construct_UPackage_SoftBone(), TEXT("ERestoringWeight"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ERestoringWeight(ERestoringWeight_StaticEnum, TEXT("/Script/SoftBone"));
static class UEnum* ESimulationHertz_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SOFTBONE_API class UEnum* Z_Construct_UEnum_SoftBone_ESimulationHertz();
		extern SOFTBONE_API class UPackage* Z_Construct_UPackage_SoftBone();
		Singleton = GetStaticEnum(Z_Construct_UEnum_SoftBone_ESimulationHertz, Z_Construct_UPackage_SoftBone(), TEXT("ESimulationHertz"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ESimulationHertz(ESimulationHertz_StaticEnum, TEXT("/Script/SoftBone"));
class UScriptStruct* FAnimNode_SoftBone::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SOFTBONE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SoftBone();
		extern SOFTBONE_API uint32 Get_Z_Construct_UScriptStruct_FAnimNode_SoftBone_CRC();
		extern SOFTBONE_API class UPackage* Z_Construct_UPackage_SoftBone();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnimNode_SoftBone, Z_Construct_UPackage_SoftBone(), TEXT("AnimNode_SoftBone"), sizeof(FAnimNode_SoftBone), Get_Z_Construct_UScriptStruct_FAnimNode_SoftBone_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnimNode_SoftBone(FAnimNode_SoftBone::StaticStruct, TEXT("/Script/SoftBone"));
static struct FScriptStruct_SoftBone_StaticRegisterNativesFAnimNode_SoftBone
{
	FScriptStruct_SoftBone_StaticRegisterNativesFAnimNode_SoftBone()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnimNode_SoftBone")),new UScriptStruct::TCppStructOps<FAnimNode_SoftBone>);
	}
} ScriptStruct_SoftBone_StaticRegisterNativesFAnimNode_SoftBone;
class UScriptStruct* FBonePair::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SOFTBONE_API class UScriptStruct* Z_Construct_UScriptStruct_FBonePair();
		extern SOFTBONE_API uint32 Get_Z_Construct_UScriptStruct_FBonePair_CRC();
		extern SOFTBONE_API class UPackage* Z_Construct_UPackage_SoftBone();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FBonePair, Z_Construct_UPackage_SoftBone(), TEXT("BonePair"), sizeof(FBonePair), Get_Z_Construct_UScriptStruct_FBonePair_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FBonePair(FBonePair::StaticStruct, TEXT("/Script/SoftBone"));
static struct FScriptStruct_SoftBone_StaticRegisterNativesFBonePair
{
	FScriptStruct_SoftBone_StaticRegisterNativesFBonePair()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("BonePair")),new UScriptStruct::TCppStructOps<FBonePair>);
	}
} ScriptStruct_SoftBone_StaticRegisterNativesFBonePair;
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	ANIMGRAPHRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRuntimeFloatCurve();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FBoneReference();

	SOFTBONE_API class UEnum* Z_Construct_UEnum_SoftBone_ERestoringWeight();
	SOFTBONE_API class UEnum* Z_Construct_UEnum_SoftBone_ESimulationHertz();
	SOFTBONE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SoftBone();
	SOFTBONE_API class UScriptStruct* Z_Construct_UScriptStruct_FBonePair();
	SOFTBONE_API class UPackage* Z_Construct_UPackage_SoftBone();
	UEnum* Z_Construct_UEnum_SoftBone_ERestoringWeight()
	{
		UPackage* Outer=Z_Construct_UPackage_SoftBone();
		static UEnum* ReturnEnum = NULL;
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ERestoringWeight"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ERestoringWeight::RW_Constant")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ERestoringWeight::RW_Linear")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ERestoringWeight::RW_Quadratic")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ERestoringWeight::RW_Custom")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ERestoringWeight::RW_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/AnimNode_SoftBone.h"));
			MetaData->SetValue(ReturnEnum, TEXT("RW_Constant.DisplayName"), TEXT("Constant"));
			MetaData->SetValue(ReturnEnum, TEXT("RW_Constant.ToolTip"), TEXT("All bones have same weight"));
			MetaData->SetValue(ReturnEnum, TEXT("RW_Custom.DisplayName"), TEXT("Custom"));
			MetaData->SetValue(ReturnEnum, TEXT("RW_Custom.ToolTip"), TEXT("Use custom curve"));
			MetaData->SetValue(ReturnEnum, TEXT("RW_Linear.DisplayName"), TEXT("Linear"));
			MetaData->SetValue(ReturnEnum, TEXT("RW_Linear.ToolTip"), TEXT("Linearly decrease"));
			MetaData->SetValue(ReturnEnum, TEXT("RW_Quadratic.DisplayName"), TEXT("Quadratic"));
			MetaData->SetValue(ReturnEnum, TEXT("RW_Quadratic.ToolTip"), TEXT("Quadratically decrease"));
#endif
		}
		return ReturnEnum;
	}
	UEnum* Z_Construct_UEnum_SoftBone_ESimulationHertz()
	{
		UPackage* Outer=Z_Construct_UPackage_SoftBone();
		static UEnum* ReturnEnum = NULL;
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESimulationHertz"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESimulationHertz::SH_30Hz")), 30));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESimulationHertz::SH_60Hz")), 60));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESimulationHertz::SH_120Hz")), 120));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESimulationHertz::SH_MAX")), 121));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/AnimNode_SoftBone.h"));
			MetaData->SetValue(ReturnEnum, TEXT("SH_120Hz.DisplayName"), TEXT("120Hz"));
			MetaData->SetValue(ReturnEnum, TEXT("SH_30Hz.DisplayName"), TEXT("30Hz"));
			MetaData->SetValue(ReturnEnum, TEXT("SH_60Hz.DisplayName"), TEXT("60Hz"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Simple controller that makes a series of bones to jiggle and move like a soft body but satisfies bone length constraints."));
#endif
		}
		return ReturnEnum;
	}
	UScriptStruct* Z_Construct_UScriptStruct_FAnimNode_SoftBone()
	{
		UPackage* Outer=Z_Construct_UPackage_SoftBone();
		static UScriptStruct* ReturnStruct = NULL;
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnimNode_SoftBone"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FAnimNode_SkeletalControlBase(), new UScriptStruct::TCppStructOps<FAnimNode_SoftBone>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bGuaranteeSameSimulationResult, FAnimNode_SoftBone, bool);
			UProperty* NewProp_bGuaranteeSameSimulationResult = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bGuaranteeSameSimulationResult"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bGuaranteeSameSimulationResult, FAnimNode_SoftBone), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bGuaranteeSameSimulationResult, FAnimNode_SoftBone), sizeof(bool), true);
			UProperty* NewProp_SimulationHertz = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SimulationHertz"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SimulationHertz, FAnimNode_SoftBone), 0x0000000000000005, Z_Construct_UEnum_SoftBone_ESimulationHertz());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bBoneLengthConstraint, FAnimNode_SoftBone, bool);
			UProperty* NewProp_bBoneLengthConstraint = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bBoneLengthConstraint"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bBoneLengthConstraint, FAnimNode_SoftBone), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bBoneLengthConstraint, FAnimNode_SoftBone), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowDebugBones, FAnimNode_SoftBone, bool);
			UProperty* NewProp_bShowDebugBones = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bShowDebugBones"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowDebugBones, FAnimNode_SoftBone), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bShowDebugBones, FAnimNode_SoftBone), sizeof(bool), true);
			UProperty* NewProp_WeightCurve = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("WeightCurve"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WeightCurve, FAnimNode_SoftBone), 0x0000000000000001, Z_Construct_UScriptStruct_FRuntimeFloatCurve());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseWeightCurve, FAnimNode_SoftBone, bool);
			UProperty* NewProp_bUseWeightCurve = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bUseWeightCurve"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseWeightCurve, FAnimNode_SoftBone), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bUseWeightCurve, FAnimNode_SoftBone), sizeof(bool), true);
			UProperty* NewProp_RestoringWeightType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RestoringWeightType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(RestoringWeightType, FAnimNode_SoftBone), 0x0000000000000005, Z_Construct_UEnum_SoftBone_ERestoringWeight());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAllowTipBoneRotation, FAnimNode_SoftBone, bool);
			UProperty* NewProp_bAllowTipBoneRotation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bAllowTipBoneRotation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAllowTipBoneRotation, FAnimNode_SoftBone), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bAllowTipBoneRotation, FAnimNode_SoftBone), sizeof(bool), true);
			UProperty* NewProp_DampingRatio = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DampingRatio"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DampingRatio, FAnimNode_SoftBone), 0x0000000000000005);
			UProperty* NewProp_Stiffness = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Stiffness"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Stiffness, FAnimNode_SoftBone), 0x0000000000000005);
			UProperty* NewProp_GravityScale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GravityScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(GravityScale, FAnimNode_SoftBone), 0x0000000000000005);
			UProperty* NewProp_AdditionalChains = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AdditionalChains"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(AdditionalChains, FAnimNode_SoftBone), 0x0000000000000005);
			UProperty* NewProp_AdditionalChains_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AdditionalChains, TEXT("AdditionalChains"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FBonePair());
			UProperty* NewProp_TipBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TipBone"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TipBone, FAnimNode_SoftBone), 0x0000000000000005, Z_Construct_UScriptStruct_FBoneReference());
			UProperty* NewProp_RootBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RootBone"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RootBone, FAnimNode_SoftBone), 0x0000000000000005, Z_Construct_UScriptStruct_FBoneReference());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(NewProp_bGuaranteeSameSimulationResult, TEXT("Category"), TEXT("Solver"));
			MetaData->SetValue(NewProp_bGuaranteeSameSimulationResult, TEXT("ModuleRelativePath"), TEXT("Public/AnimNode_SoftBone.h"));
			MetaData->SetValue(NewProp_bGuaranteeSameSimulationResult, TEXT("ToolTip"), TEXT("If true, keeps same simulated results regardless of frame rates or delta time.\n          If false, It doesn't guarantee the same results and SimulationHertz will not be used but good at performance up"));
			MetaData->SetValue(NewProp_SimulationHertz, TEXT("Category"), TEXT("Solver"));
			MetaData->SetValue(NewProp_SimulationHertz, TEXT("ModuleRelativePath"), TEXT("Public/AnimNode_SoftBone.h"));
			MetaData->SetValue(NewProp_SimulationHertz, TEXT("ToolTip"), TEXT("60 hertz by default. Recommend higher than 60Hz for smooth simulation but You can also choose 30Hz for performance and adjust stiffness and damping"));
			MetaData->SetValue(NewProp_bBoneLengthConstraint, TEXT("Category"), TEXT("Solver"));
			MetaData->SetValue(NewProp_bBoneLengthConstraint, TEXT("ModuleRelativePath"), TEXT("Public/AnimNode_SoftBone.h"));
			MetaData->SetValue(NewProp_bBoneLengthConstraint, TEXT("ToolTip"), TEXT("if false, bone length will be stretched like a spring"));
			MetaData->SetValue(NewProp_bShowDebugBones, TEXT("Category"), TEXT("Solver"));
			MetaData->SetValue(NewProp_bShowDebugBones, TEXT("ModuleRelativePath"), TEXT("Public/AnimNode_SoftBone.h"));
			MetaData->SetValue(NewProp_WeightCurve, TEXT("Category"), TEXT("Solver"));
			MetaData->SetValue(NewProp_WeightCurve, TEXT("DisplayName"), TEXT("Restoring Weight Curve"));
			MetaData->SetValue(NewProp_WeightCurve, TEXT("ModuleRelativePath"), TEXT("Public/AnimNode_SoftBone.h"));
			MetaData->SetValue(NewProp_WeightCurve, TEXT("ToolTip"), TEXT("Restoring weight scale factor as a function of normalized bone number (i.e. Current Bone Number / Max Bone Number).\nX = 0 corresponds to Root bone, X = 1 corresponds to Tip bone.\nStiffness*Y, Y = 0 corresponds to No Restore, Y = 1 corresponds to \"Stiffness\" the user set above."));
			MetaData->SetValue(NewProp_WeightCurve, TEXT("XAxisName"), TEXT("Normalized Bone Number"));
			MetaData->SetValue(NewProp_WeightCurve, TEXT("YAxisName"), TEXT("Restoring Weight"));
			MetaData->SetValue(NewProp_bUseWeightCurve, TEXT("Category"), TEXT("Solver"));
			MetaData->SetValue(NewProp_bUseWeightCurve, TEXT("ModuleRelativePath"), TEXT("Public/AnimNode_SoftBone.h"));
			MetaData->SetValue(NewProp_RestoringWeightType, TEXT("Category"), TEXT("Solver"));
			MetaData->SetValue(NewProp_RestoringWeightType, TEXT("ModuleRelativePath"), TEXT("Public/AnimNode_SoftBone.h"));
			MetaData->SetValue(NewProp_RestoringWeightType, TEXT("ToolTip"), TEXT("This parameter is experimental for now"));
			MetaData->SetValue(NewProp_bAllowTipBoneRotation, TEXT("Category"), TEXT("Solver"));
			MetaData->SetValue(NewProp_bAllowTipBoneRotation, TEXT("ModuleRelativePath"), TEXT("Public/AnimNode_SoftBone.h"));
			MetaData->SetValue(NewProp_bAllowTipBoneRotation, TEXT("ToolTip"), TEXT("allow tip bone rotation"));
			MetaData->SetValue(NewProp_DampingRatio, TEXT("Category"), TEXT("Parameters"));
			MetaData->SetValue(NewProp_DampingRatio, TEXT("ModuleRelativePath"), TEXT("Public/AnimNode_SoftBone.h"));
			MetaData->SetValue(NewProp_DampingRatio, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_DampingRatio, TEXT("ToolTip"), TEXT("ranged [0..1] Velocity Damping Ratio, 0 means No damping, 1 means Velocity will be 0 at next tick."));
			MetaData->SetValue(NewProp_Stiffness, TEXT("Category"), TEXT("Parameters"));
			MetaData->SetValue(NewProp_Stiffness, TEXT("ModuleRelativePath"), TEXT("Public/AnimNode_SoftBone.h"));
			MetaData->SetValue(NewProp_Stiffness, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_Stiffness, TEXT("ToolTip"), TEXT("in the range [0..1] This means Restoring Force Ratio,  if 0, it doesn't restore to the original shape at all. *"));
			MetaData->SetValue(NewProp_GravityScale, TEXT("Category"), TEXT("Parameters"));
			MetaData->SetValue(NewProp_GravityScale, TEXT("ModuleRelativePath"), TEXT("Public/AnimNode_SoftBone.h"));
			MetaData->SetValue(NewProp_GravityScale, TEXT("PinShownByDefault"), TEXT(""));
			MetaData->SetValue(NewProp_GravityScale, TEXT("ToolTip"), TEXT("Decrease this scale when the chain is unstable against gravity. GravityZ comes from WorldSetting. *"));
			MetaData->SetValue(NewProp_AdditionalChains, TEXT("Category"), TEXT("BoneChain"));
			MetaData->SetValue(NewProp_AdditionalChains, TEXT("ModuleRelativePath"), TEXT("Public/AnimNode_SoftBone.h"));
			MetaData->SetValue(NewProp_AdditionalChains, TEXT("ToolTip"), TEXT("Never duplicate same bones already included in other chains *"));
			MetaData->SetValue(NewProp_TipBone, TEXT("Category"), TEXT("BoneChain"));
			MetaData->SetValue(NewProp_TipBone, TEXT("ModuleRelativePath"), TEXT("Public/AnimNode_SoftBone.h"));
			MetaData->SetValue(NewProp_TipBone, TEXT("ToolTip"), TEXT("Name of tip bone which is the last bone of the chain. *"));
			MetaData->SetValue(NewProp_RootBone, TEXT("Category"), TEXT("BoneChain"));
			MetaData->SetValue(NewProp_RootBone, TEXT("ModuleRelativePath"), TEXT("Public/AnimNode_SoftBone.h"));
			MetaData->SetValue(NewProp_RootBone, TEXT("ToolTip"), TEXT("Name of root bone to control. This is the main bone chain to modify from. *"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnimNode_SoftBone_CRC() { return 1660760056U; }
	UScriptStruct* Z_Construct_UScriptStruct_FBonePair()
	{
		UPackage* Outer=Z_Construct_UPackage_SoftBone();
		static UScriptStruct* ReturnStruct = NULL;
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BonePair"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FBonePair>, EStructFlags(0x00000001));
			UProperty* NewProp_TipBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TipBone"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TipBone, FBonePair), 0x0000000000000005, Z_Construct_UScriptStruct_FBoneReference());
			UProperty* NewProp_RootBone = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RootBone"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RootBone, FBonePair), 0x0000000000000005, Z_Construct_UScriptStruct_FBoneReference());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(NewProp_TipBone, TEXT("Category"), TEXT("BoneChain"));
			MetaData->SetValue(NewProp_TipBone, TEXT("ModuleRelativePath"), TEXT("Public/AnimNode_SoftBone.h"));
			MetaData->SetValue(NewProp_RootBone, TEXT("Category"), TEXT("BoneChain"));
			MetaData->SetValue(NewProp_RootBone, TEXT("ModuleRelativePath"), TEXT("Public/AnimNode_SoftBone.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FBonePair_CRC() { return 24089176U; }
	UPackage* Z_Construct_UPackage_SoftBone()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/SoftBone")), false, false));
			ReturnPackage->PackageFlags |= PKG_CompiledIn | 0x00000000;
			FGuid Guid;
			Guid.A = 0x0964A64F;
			Guid.B = 0x1C8B88B1;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
